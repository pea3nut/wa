<extend name="__INCLUDE__/document.extend.tpl" />

<block name="title">服务接口（API）文档</block>

<block name="h1">Web开发协会网站服务接口（API）文档</block>

<block name="h1_text">
<p>协会网站拥有诸多接口，会员可以根据接口开发协会网站各个页面的模板，然后通过github提交pull request</p>
</block>



<block name="body">
<section>
    <h2>调用接口&amp;返回值</h2>
    <p>除特殊说明外，数据统一采用名值对的方式进行请求(key1=value1&amp;key1=value2&amp;...)。调用接口后服务器响应会返回一个json字符串，如</p>
<pre>
{"errcode":"4541","errmsg":"验证码不正确！"}
</pre>
    <p>因此推荐开发者采用Ajax方式调用接口，利用JSON.parse()或eval()解析JSON字符串。</p>
    <p>接口返回值篇幅较长，因此我们在其他章节进行介绍。如需了解请<a href="{:U('Exploit/errcode')}">点击这里</a></p>
    <h2>验证码接口</h2>
    <p>调用此接口会返回一张带有验证码的图片，同时协会服务器会记录此次验证码。</p>
    <ul>
        <li>请求方式：GET</li>
        <li>接口链接：站点URL/Service/verifycode</li>
        <li>返回值：image/png</li>
    </ul>
    <p>协会很多数据库接口为了防止暴力破解添加了验证码机制，很多高级接口需要开发者先调用验证码接口获得验证码图片，在调用高级接口提交请求时将正确的验证码一并提交到服务器。</p>
    <p>因此，如果需要开发特定页面的模板(如登陆页面)，需要在表单form中加入用于输入验证码的input并调用验证码接口。</p>
<pre>
//HTML
&lt;img alt="verifycode" src="站点URL/Service/verifycode" /&gt;
&lt;input name="verifycode" type="text" /&gt;
</pre>
    <p>为使调试更加便利，网站提供了一个配置可以允许调用任何接口免去验证验证码。确保你在调试模式的情况下打开./Nutjs/Home/Conf/config.php，修改配置</p>
<pre>
//表单提交时无需验证verifycode，此配置还要求开启调试模式的情况下才可生效
'Not_VerifyCode' => true,
</pre>
</section>

<section>
<h2>用户登陆接口</h2>
    <p>协会网站使用此接口来实现用户登陆。</p>
    <ul>
        <li>请求方式：POST</li>
        <li>接口链接：站点URL/Service/sign_in</li>
        <li>返回值：JSON</li>
    </ul>
    <p>请求需要提交的数据字段：</p>
    <ul>
        <li>username -> 用户的协会编号或QQ号</li>
        <li>password -> 用户的登陆密码</li>
        <li>verifycode -> 验证码。调用验证码接口返回的图片中的验证码。</li>
    </ul>
    <p>服务器返回一个JSON字符串。如果登陆成功，将生成2个cookie</p>
    <ul>
        <li>uid -> 用户的协会编号</li>
        <li>token -> 用户的登陆令牌</li>
    </ul>
    <p>实例参考:</p>
<pre>
//注意，这里使用form方式提交进行演示，实际上应使用Ajax进行提交和处理
&lt;form action="站点URL/Service/sign_in" method="post"&gt;
    &lt;p&gt;用户名: &lt;input type="text" name="username" /&gt;&lt;/p&gt;
    &lt;p&gt;密码: &lt;input type="password" name="password" /&gt;&lt;/p&gt;
    &lt;p&gt;
        验证码: &lt;input type="text" name="verifycode" /&gt;
        &lt;img alt="verifycode" src="站点URL/Service/verifycode" /&gt;
    &lt;/p&gt;
    &lt;input type="submit" value="提交" /&gt;
&lt;/form&gt;
</pre>
</section>

<section>
    <h2>用户注册接口1</h2>
    <p>协会网站使用此接口来实现用户注册。用户注册需要2步才能完成</p>
    <ul>
        <li>请求方式：POST</li>
        <li>接口链接：站点URL/Service/sign_up_0</li>
        <li>返回值：JSON</li>
    </ul>
    <p>请求需要提交的数据字段：</p>
    <ul>
        <li>qq -> 用户的QQ号，这个字段十分重要，可作为登陆用，一经注册不可修改</li>
        <li>password -> 用户的登陆密码</li>
        <li>re_password -> 确认密码</li>
        <li>invite_code -> 协会发放的邀请码</li>
        <li>verifycode -> 验证码。调用验证码接口返回的图片中的验证码。</li>
    </ul>
    <p>服务器返回一个JSON字符串。如果登陆成功，JSON字符串中errmsg中返回服务器为当前用户随机生成的协会编号，并且生成2个cookie</p>
    <ul>
        <li>uid -> 用户的协会编号</li>
        <li>token -> 用户的登陆令牌</li>
    </ul>
    <p>实例参考:</p>
<pre>
//注意，这里使用form方式提交进行演示，实际上应使用Ajax进行提交和处理
&lt;form action="站点URL/Service/sign_up_0" method="post"&gt;
    &lt;p&gt;用户名: &lt;input type="text" name="username" /&gt;&lt;/p&gt;
    &lt;p&gt;密码: &lt;input type="password" name="password" /&gt;&lt;/p&gt;
    &lt;p&gt;激活码: &lt;input type="text" name="invite_code" /&gt;&lt;/p&gt;
    &lt;p&gt;
        验证码: &lt;input type="text" name="verifycode" /&gt;
        &lt;img alt="verifycode" src="站点URL/Service/verifycode" /&gt;
    &lt;/p&gt;
    &lt;input type="submit" value="提交" /&gt;
&lt;/form&gt;
</pre>
</section>

<section>
    <h2>用户注册接口2</h2>
    <p>用户注册的第二步，填写各种必备信息</p>
    <ul>
        <li>请求方式：POST</li>
        <li>接口链接：站点URL/Service/sign_up_1</li>
        <li>返回值：JSON</li>
    </ul>
    <p>接口需要用户拥有登陆cookie，如果没有可调用用户登陆接口获取。</p>
    <p>请求需要提交的数据字段：</p>
    <ul>
        <li>name -> 用户的姓名</li>
        <li>gender -> 用户的性别。1表示男，2表示女</li>
        <li>age -> 用户的年龄</li>
        <li>phone -> 用户的手机号</li>
        <li>school -> 用户所在的学校。ql表示青岛理工大学，sk表示山东科技大学，sy表示中国石油大学</li>
        <li>wechat -> 用户的微信号。可以留空</li>
        <li>nickname -> 用户的昵称。可以留空</li>
        <li>verifycode -> 验证码。调用验证码接口返回的图片中的验证码。</li>
    </ul>
    <p>服务器返回一个JSON字符串。</p>
    <p>实例参考:</p>
<pre>
//注意，这里使用form方式提交进行演示，实际上应使用Ajax进行提交和处理
&lt;form action="站点URL/Service/sign_up_1" method="post"&gt;
    &lt;p&gt;姓名: &lt;input type="text" name="username" /&gt;&lt;/p&gt;
    &lt;p&gt;性别：
        男-&gt;&lt;input type="radio" value="1" name="gender"&gt;
        女-&gt;&lt;input type="radio" value="2" name="gender"&gt;
    &lt;p&gt;年龄: &lt;input type="text" name="age" /&gt;&lt;/p&gt;
    &lt;p&gt;手机号: &lt;input type="text" name="phone" /&gt;&lt;/p&gt;
    &lt;select name="school"&gt;
        &lt;option&gt;请选择大学&lt;/option&gt;
        &lt;option value="sy"&gt;中国石油大学&lt;/option&gt;
        &lt;option value="sk"&gt;山东科技大学&lt;/option&gt;
        &lt;option value="ql"&gt;青岛理工大学&lt;/option&gt;
    &lt;/select&gt;
    &lt;p&gt;微信号(可以留空): &lt;input type="text" name="wechat" /&gt;&lt;/p&gt;
    &lt;p&gt;
        验证码: &lt;input type="text" name="verifycode" /&gt;
        &lt;img alt="verifycode" src="站点URL/Service/verifycode" /&gt;
    &lt;/p&gt;
    &lt;input type="submit" value="提交" /&gt;
&lt;/form&gt;
</pre>
</section>

<section>
    <h2>退出登录接口</h2>
    <p>协会网站使用此接口来实现用户退出登录功能。</p>
    <ul>
        <li>请求方式：GET</li>
        <li>接口链接：站点URL/Service/sign_out</li>
        <li>返回值：JSON</li>
    </ul>
    <p>此操作将更新登陆令牌(原令牌则失效)，并销毁所有cookie。</p>
    <p>服务器返回一个JSON字符串。</p>
    <p>实例参考:</p>
<pre>
//注意，这里采用直接连接的方式进行演示，实际上应使用Ajax进行请求和处理
&lt;a href="站点URL/Service/sign_out"&gt;退出登录&lt;/a&gt;
</pre>
</section>

<section>
    <h2>修改密码接口</h2>
    <p>协会网站使用此接口来实现用户修改密码功能。</p>
    <ul>
        <li>请求方式：POST</li>
        <li>接口链接：站点URL/Service/change_password</li>
        <li>返回值：JSON</li>
    </ul>
    <p>接口需要用户拥有登陆cookie，如果没有可调用用户登陆接口获取。</p>
    <p>请求需要提交的数据字段：</p>
    <ul>
        <li>password -> 用户的登陆新密码</li>
        <li>re_password -> 确认密码</li>
        <li>verifycode -> 验证码。调用验证码接口返回的图片中的验证码。</li>
    </ul>
    <p>服务器返回一个JSON字符串。如果修改密码成功，将执行退出登录操作</p>
    <p>实例参考:</p>
<pre>
//注意，这里使用form方式提交进行演示，实际上应使用Ajax进行提交和处理
&lt;form action="站点URL/Service/change_password" method="post"&gt;
    &lt;p&gt;密码: &lt;input type="password" name="password" /&gt;&lt;/p&gt;
    &lt;p&gt;确认密码: &lt;input type="password" name="re_password" /&gt;&lt;/p&gt;
    &lt;p&gt;
        验证码: &lt;input type="text" name="verifycode" /&gt;
        &lt;img alt="verifycode" src="站点URL/Service/verifycode" /&gt;
    &lt;/p&gt;
    &lt;input type="submit" value="提交" /&gt;
&lt;/form&gt;
</pre>
</section>

<section>
    <h2>调试接口</h2>
    <p>协会内网提供了很多调试接口便于开发者调试。</p>
    <section>
        <h3>检测令牌是否有效</h3>
        <p>通过此接口可以检测当前令牌是否有效。确切的说是检测现在是否是成功登陆的状态。</p>
        <ul>
            <li>请求方式：POST</li>
            <li>接口链接：站点URL/Tools/test_token</li>
            <li>返回值：检测通过返回1，失败返回0</li>
        </ul>
        <p>请求需要提交的数据字段：</p>
        <ul>
            <li>uid -> 协会编号，如果留空则自动获取cookie的uid</li>
            <li>token -> 令牌，如果留空则自动获取cookie的token</li>
        </ul>
    </section>
    <section>
        <h3>获取某个用户的账号状态值</h3>
        <p>通过此接口可以直接获取某个用户账号的状态值</p>
        <ul>
            <li>请求方式：POST</li>
            <li>接口链接：站点URL/Tools/get_state</li>
            <li>返回值：用户的账号状态值。具体参考请<a href="{:U('Exploit/user_state')}">点击这里</a></li>
        </ul>
        <p>请求需要提交的数据字段：</p>
        <ul>
            <li>uid -> 协会编号，如果留空则自动获取cookie的uid</li>
        </ul>
    </section>
    <section>
        <h3>以一个更友好的方式检测令牌</h3>
        <p>通过此接口可以更直观的显示状态信息。</p>
        <ul>
            <li>请求方式：POST</li>
            <li>接口链接：站点URL/Tools/test_token</li>
            <li>返回值：html</li>
        </ul>
        <p>请求需要提交的数据字段：</p>
        <ul>
            <li>uid -> 协会编号，如果留空则自动获取cookie的uid</li>
            <li>token -> 令牌，如果留空则自动获取cookie的token</li>
        </ul>
        <p>调试模式开启的情况下，能显示更多的信息。</p>
    </section>
</section>

<section>
    <h2>签到接口</h2>
    <p>此接口可供用户每日签到，获取响应数量的果仁</p>
    <ul>
        <li>请求方式：GET</li>
        <li>接口链接：站点URL/Service/clock</li>
        <li>返回值：JSON</li>
    </ul>
    <p>接口需要用户拥有登陆cookie，如果没有可调用用户登陆接口获取。</p>
    <p>服务器返回一个JSON字符串。若签到成功返回成功状态码(1200)并返回一段说明文本来告知用户获得的果仁数量。</p>
<pre>
//返回值例子
{"errcode":"1200","errmsg":"今天是第1个签到的，获得系数3\\n因连续签到0天，获得系数1\\n果仁数+30"}
</pre>
    <p>实例参考:</p>
<pre>
//注意，这里使用form方式提交进行演示，实际上应使用Ajax进行提交和处理
&lt;form action="站点URL/Service/clock" method="get"&gt;
    &lt;input type="submit" value="提交" /&gt;
&lt;/form&gt;
</pre>
</section>

<section>
    <h2>果仁商店接口</h2>

    <h3>提交/修改作品接口</h3>
    <p>通过此接口可实现在果仁商店提交/修改作品的功能。</p>
    <p>接口需要用户拥有登陆cookie，如果没有可调用用户登陆接口获取。</p>
    <ul>
    	<li>请求方式：POST</li>
    	<li>接口链接：站点URL/Service/ns_works</li>
    	<li>返回值：JSON</li>
    </ul>
    <p>请求需要提交的数据字段，所有的参数都是可选的：</p>
    <ul>
    	<li>works_id -> 作品ID</li>
    	<li>works_name -> 作品名称</li>
    	<li>works_intro -> 作品简介</li>
    	<li>banner -> 作品的banner</li>
    	<li>price -> 出售价格</li>
    </ul>
    <dl>
    	<dt>当works_id为数字时</dt>
    	<dd>服务器会识别成编辑作品信息，此时所有的参数为可选，若某一字段有值则会覆盖</dd>
    	<dt>当works_id为空时</dt>
    	<dd>服务器会识别成创建作品信息，此时works_name与price为必选。</dd>
    </dl>
    <p>服务器返回一个JSON字符串，若创建成功（服务器返回1200码），还会返回额外的work_id字段来指示创建得来的ID值</p>
    <p>实例参考</p>
<pre>
//返回值例子
{"errcode":"1200","errmsg":"7"}
</pre>
    <p>实例参考:</p>
<pre>
//注意，这里使用form方式提交进行演示，实际上应使用Ajax进行提交和处理
&lt;form action="站点URL/Service/clock" method="post"&gt;
    &lt;p&gt;作品名称：&lt;input type="text" name="works_name" /&gt;&lt;/p&gt;
    &lt;p&gt;简介：&lt;textarea name="works_intro"&gt;&lt;/textarea&gt;&lt;/p&gt;
    &lt;p&gt;出售价格：&lt;input type="text" name="price" /&gt;&lt;/p&gt;
    &lt;input type="submit" value="提交" /&gt;
&lt;/form&gt;
</pre>
    <h3>提交/修改作品章节接口</h3>
    <p>通过此接口可实现在果仁商店中给作品提交/修改章节。</p>
    <p>接口需要用户拥有登陆cookie，如果没有可调用用户登陆接口获取。</p>
    <ul>
        <li>请求方式：POST</li>
        <li>接口链接：站点URL/Service/ns_section</li>
        <li>返回值：JSON</li>
    </ul>
    <p>请求需要提交的数据字段，除works_id以外，所有的参数都是可选的：</p>
    <ul>
        <li>works_id -> 作品ID</li>
        <li>section_id -> 章节ID。0表示序言，1表示第一章，2表示第二章，以此类推</li>
        <li>section_name -> 章节名称</li>
        <li>mode -> 模式。默认auto。[auto|create|edit]</li>
        <li>md_file -> 一个文件，内容是markdown文本。</li>
    </ul>
    <p>这个接口的行为比较复杂，根据mode的值产生的行为也会不一样</p>
    <dl>
    	<dt>mode为create时</dt>
    	<dd>当section_id为数字时，服务器会尝试创建section_id为序的章节，若已存在，则会报错。</dd>
    	<dd>当section_id为空时，服务器会自动的生成一个section_id，生成的section_id是已存在的所有章节的最大值+1</dd>
    	<dt>mode为edit时</dt>
    	<dd>section_id必须为一个数字，表示要编辑信息的章节。</dd>
    	<dt>mode为auto</dt>
    	<dd>服务器会根据section_id自动判断，提交一个已存在的section_id则会直接覆盖信息。</dd>
    </dl>
    <p>服务器返回一个JSON字符串。</p>
    <p>实例参考:</p>
<pre>
//注意，这里使用form方式提交进行演示，实际上应使用Ajax进行提交和处理
&lt;form action="站点URL/Service/ns_add_section" enctype="multipart/form-data" method="post">
    &lt;p&gt;作品ID：&lt;input type="text" name="works_id" /&gt;&lt;/p&gt;
    &lt;p&gt;章节ID：&lt;input type="text" name="section_id" /&gt;&lt;/p&gt;
    &lt;p&gt;章节名称：&lt;input type="text" name="section_name" /&gt;&lt;/p&gt;
    &lt;p&gt;章节：&lt;input type="file" name="md_file" /&gt;&lt;/p&gt;
    &lt;input type="submit" value="提交" /&gt;
&lt;/form&gt;
</pre>
    <h3>修改作品信息接口</h3>
    <p>通过此接口可实现在果仁商店中编辑作品信息，相对于其他接口，此接口的行为就比较复杂了。</p>
    <p>接口需要用户拥有登陆cookie，如果没有可调用用户登陆接口获取。</p>
    <ul>
        <li>请求方式：POST</li>
        <li>接口链接：站点URL/Service/ns_edit_works</li>
        <li>返回值：JSON</li>
    </ul>
</section>


</block>