<extend name="__INCLUDE__/document.extend.tpl" />

<block name="title">网站构架信息</block>

<block name="h1">Web开发协会网站构架信息</block>

<block name="h1_text"><p>本章节将为你介绍协会网站的构架信息。</p></block>

<block name="body">
<section>
    <h2>基本信息</h2>
    <p>协会网站基本信息如下：</p>
    <ul>
        <li>操作系统：Linux CentOS 6.5</li>
        <li>服务器：Apache 2.4.16</li>
        <li>数据库：MySQL 5.6.27</li>
        <li>后台语言：PHP 5.5.30</li>
        <li>公网IP：120.27.108.49</li>
    </ul>
    <p>协会网站采用ThinkPHP3.2.3搭建而成，采用SMVC(Service Model View Controller)架构，对原生的ThinkPHP框架做过小幅度修改，可能会造成不兼容现象，请开发者在调试过程中测试指正，我们会第一时间修复不兼容现象。</p>
<pre>
联系人：花生PeA
邮箱：626954412@qq.com
</pre>
</section>

<section>
    <h2>文件目录参考</h2>
<pre>
站点目录
├─Nutjs 应用目录
│  ├─Home 站点模块
│  │  ├─Common 预加载文件mul
│  │  │  ├─define.php 预定义常量文件
│  │  │  ├─error_code.php 调用接口返回的错误码
│  │  │  └─function.php 函数库文件
│  │  ├─Conf 配置文件存放文件夹
│  │  │  └─config.php 模块配置文件
│  │  ├─Controller 控制器层目录
│  │  │  ├─ExploitController.class.php 开发控制器
│  │  │  ├─IndexController.class.php 首页控制器
│  │  │  ├─MemberController.class.php 会员请求控制器
│  │  │  ├─MntController.class.php 测试控制器
│  │  │  ├─NutjsController.class.php Nutjs团队专用控制器
│  │  │  ├─ServiceController.class.php Service层转接控制器
│  │  │  └─ToolsController.class.php 工具控制器
│  │  ├─Model 模型层目录
│  │  │  ├─InviteCodeModel.class.php 邀请码表模型
│  │  │  ├─TokenModel.class.php 登陆令牌表模型
│  │  │  ├─UserInfModel.class.php 用户信息表模型
│  │  │  └─UsersModel.class.php 用户基础表模型
│  │  ├─Public 模板资源文件目录
│  │  │  ├─Image 图片资源目录
│  │  │  ├─Include 引用文件资源目录
│  │  │  ├─Script 脚本资源目录
│  │  │  └─Style 层叠样式表资源目录
│  │  ├─Service 服务层目录
│  │  │  ├─ChangePasswordService.class.php 修改密码服务
│  │  │  ├─GetPasswordService.class.php 找回密码服务
│  │  │  ├─SignInService.class.php 用户登陆服务
│  │  │  ├─SignOutService.class.php 用户登出服务
│  │  │  ├─SignUp0Service.class.php 用户注册服务1
│  │  │  ├─SignUp1Service.class.php 用户注册服务2
│  │  ├─View 视图层目录(模板文件)
│  │  │  ├─Exploit 开发文档页面模板
│  │  │  ├─Index 首页模板
│  │  │  ├─Member 会员请求页面模板
│  │  │  ├─Exploit 开发文档页面模板
│  │  │  ├─Mnt 测试控制器页面模板
│  │  │  ├─Tools 工具控制器页面模板
│  │  │  └─... 各种控制器模板文件夹
│  │  ├─Widget Widget组件目录(模板文件)
│  │  │  └─MntWidget.class.php 测试Widget组件控制器
│  │  └─... 其他目录
│  └─Runtime 运行时目录（缓存，可以随意删除）
├─Public 公共资源文件目录
│  ├─Library Nutjs团队公共资源文件夹
│  └─... 其他公共资源文件夹
├─ThinkPHP 框架目录
└─index.php 入口文件
</pre>
    </section>

    <section>
    <h2>获取协会网站源码</h2>
    <p>详情<a href="{:U('Exploit/deploy')}">参见这里</a></p>
</section>

<section>
    <h2>网站分层详解</h2>
    <p>我们按照从前端到数据库可以简单的将协会网站分为7层。</p>
<pre>
前端页面 &lt;-1-2-3--4--5-6-7-&gt; 数据库
</pre>
    <ol>
        <li>前端页面的显示外观</li>
        <li>前端页面显示（JavaScript层面）+ Ajax + 提示重定向</li>
        <li>前端页面显示（PHP层面）。比如从数据库取数据分页、登陆后的页面。</li>
        <li>链接前三层后后三层，控制页面URL</li>
        <li>对用户提交的数据进行处理响应。比如响应登陆注册的请求</li>
        <li>将数据库信息映射成PHP模型（Model模型）</li>
        <li>纯粹是数据库建设</li>
    </ol>
    <p>对应SMVC架构如下：</p>
    <ul>
        <li>1,2 View层</li>
        <li>3 Controller层</li>
        <li>5 Service层</li>
        <li>6 Model层</li>
    </ul>
    <p>下面介绍每一层的作用。注意，这里是Web开发协会网站的分层作用，不同的网站在不同的层次功能划分可能会有所不同！</p>
    <section>
        <h3>Model层</h3>
        <p>最为基础的一层，动态网站的基础实现。</p>
        <p>Model负责将数据库映射到PHP。理论上，数据库中有多少个表，Model层就有多少个类</p>
        <p>简单来说，Model就是用ThinkPHP的方法来表示数据库。不严谨的说，是用Model层来盖住数据库。这样可以让开发人员仅了解Model层而不了解数据库的情况下使用数据库。操作数据库时直接操作Model即可，ThinkPHP会自动的转码成操作数据库的命令</p>
    </section>
    <section>
        <h3>Service层</h3>
        <p>最为敏感的一层，网站攻击的首选。</p>
        <p>Service层负责处理响应前端Ajax请求。理论上，有多少种Ajax请求就有多少个Service类</p>
        <p>简单来说，Service处理用户通过Ajax提交过来的数据，然后做出相应的响应。比如用户可能有注册 登陆 找回密码的请求，那么应该每一个动作都对应一个Service类来处理它，同样，一个Service类对应一个用户的动作</p>
        <p>这个是我们（Nutjs团队）自己加的层，方便更加清晰的实现业务逻辑。Service层介于Model层和Controller层之间。Service的入口文件是Controller层的ServiceController.class.php文件。每个Service类中的run方法会自动检测，如存在则自动调用。</p>
    </section>
    <section>
        <h3>View层</h3>
        <p>最为重要的一层，SMVC构架的核心。</p>
        <p>View层负责前端页面的显示效果，包括页面设计、布局设计、模板开发、Ajax提交、提示跳转等。</p>
        <p>View层不仅仅要提供TPL模板，还要带领用户跳转，提交用户数据等，直接关系到用户的用户体验。并且，View对于其他层的依赖性是最低的。</p>
    </section>
    <section>
        <h3>Controller层</h3>
        <p>Controller层配合View层完成完整的页面显示。</p>
        <p>Controller拥有读取数据库（使用Model）的权限，可以配合View实现完整的页面显示。如从数据库读取商品信息传递给View层。</p>
        <p>Controller层还复杂各个层次的驱动，解决各个层次直接配合的问题，都是写很零碎很杂的问题，负责Controller需要开发人员对于网站有着全面的了解。</p>
        <p>最为复杂的一层，SMVC构架的驱动。</p>
    </section>
</section>
</block>