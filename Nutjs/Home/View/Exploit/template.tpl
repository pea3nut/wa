<extend name="__INCLUDE__/document.extend.tpl" />

<block name="title">模板开发文档</block>

<block name="h1">Web开发协会网站模板开发文档</block>

<block name="h1_text">
    <p>协会网站采用ThinkPHP3.2.3框架搭建而成，在页面显示（View层）方面使用使用ThinkPHP原生的ThinkTemplate模板引擎。</p>
    <p>详细的模板引擎使用请参考<a href="http://www.kancloud.cn/manual/thinkphp">ThinkPHP官方手册</a>中视图和模板章节，这里就不再过多赘述。本章节主要向开发者介绍协会网站的View层构架和模板开发。</p>
</block>

<block name="body">
<section>
    <h2>模板构架</h2>
    <p>网站页面模板存放规则为</p>
<pre>
./Nutjs/Home/View/控制器名/方法名.tpl
</pre>
    <p>如协会的登陆页面“http://www.nutjs.com/Member/sign_in”，其中控制器名是Member，方法名是sign_in。所以调用的模板就为</p>
<pre>
./Nutjs/Home/View/Member/sign_in.tpl
</pre>
    <blockquote>
    注意，路径是严格区分大小写的
    </blockquote>
    <p>所以，每一个模板文件都有其归属的控制器，如果没有相应控制器直接在<code>./Nutjs/Home/View/</code>下建立文件夹并在文件夹创建中模板文件，这样是无法运行的。</p>
    <p>通常来说我们<strong>不建议</strong>开发者创建额外的控制器来调试，除非你明确知道自己在做什么。我们为开发者提供了一个开发测试用的Mnt控制器，开发者仅需在<code>./Nutjs/Home/View/Mnt</code>文件夹下创建模板文件即可运行。</p>
    <p>在进行模板开发时，无需知道控制器所在的位置，仅仅在“./Nutjs/View/”中新建一个以控制器命名的文件夹，如Mnt文件夹，然后自由的命名模板文件即可渲染执行。</p>
    <p>比如，我们在<code>./Nutjs/Home/View/Mnt</code>文件中建立一个test.tpl文件如下：</p>
<pre>
//文件路径./Nutjs/Home/View/Mnt/test.tpl
Hello World!
</pre>
    <p>我们通过<code>URL[站点URL]/Mnt/test</code>就可以看到如下显示：</p>
<pre>
Hello World!
</pre>
    <p>也就是说按照<code>./Nutjs/Home/View/控制器名</code>的路径规则建立模板文件就可以直接通过访问<code>站点URL/控制器名/模板文件名</code>即可直接渲染输出特定的模板文件（大部分情况是这样）。</p>
</section>

<section>
    <h2>资源文件</h2>
        <p>这里所说的资源文件通常来说表示css文件、js文件、图片等。</p>
        <p>请开发者尽可能的遵守资源文件存放规则，否则可能无法正常使用我们扩展的魔法常量。</p>
        <section>
            <h3>控制器资源文件夹</h3>
            <p>不同控制器中的模板文件拥有不同的模板资源存放文件夹。也就是说同一控制器的所有模板文件共享一个资源文件夹。其路径规则为：</p>
<pre>
CSS文件:  ./Nutjs/Public/Style/控制器名
JS文件:   ./Nutjs/Public/Script/控制器名
图片文件:  ./Nutjs/Public/Image/控制器名
引用文件:  ./Nutjs/Public/Include/控制器名
</pre>
            <p>通常来说，我们不推荐某个控制器的模板文件跨控制器访问非本控制器的资源文件，如果需要跨控制器访问，请使用公共资源文件夹。</p>
        </section>
    </section>
    <section>
        <h3>公共资源文件夹</h3>
        <p>公共资源文件夹位于<code>./Public</code>文件夹，每个人都可以在其中建立唯一的个人文件夹来存放文件，文件夹名建议以“自己名字全拼+骆驼峰+首字母大写”的方式命名，其目录结构没有任何限制，开发者可以根据自己喜好定义个人文件夹中的目录结构。</p>
        <p>每名开发者仅建议修改自己的个人文件夹，除得到许可外任何的修改他人资源文件夹的请求都将不会通过。</p>
        <p><code>./Public/Libray/</code>文件夹为Nutjs团队资源文件夹。</p>
        <p>如下面目录结构，我们建立了一个王尼玛和花生PeA的个人公共资源文件夹</p>
<pre>
站点目录
├─Nutjs 应用目录
├─Public 公共资源文件目录
│  ├─PeA_nut 花生的公共资源文件夹
│  ├─WangNiMa 王尼玛的公共资源文件夹
│  └─Library Nutjs团队公共资源文件夹
├─ThinkPHP 框架目录
└─index.php 入口文件
</pre>
    </section>
</section>

<section>
    <h2>魔法常量</h2>
    <section>
        <h3>常量参考</h3>
        <p>除ThinkPHP系统提供的魔法常量外，我们还扩展了一些魔法常量来方便使用上面的目录结构。</p>
        <p>在模板中，下面的魔法常量分别指向的目录为：</p>
<pre>
<php>echo '__PUB','__';</php>     =>  页面URL(不含域名)/Nutjs/Home/Public/
<php>echo '__STYLE','__';</php>   =>  页面URL(不含域名)/Nutjs/Home/Public/Style/控制器名
<php>echo '__IMAGE','__';</php>   =>  页面URL(不含域名)/Nutjs/Home/Public/Image/控制器名
<php>echo '__SCRIPT','__';</php>  =>  页面URL(不含域名)/Nutjs/Home/Public/Script/控制器名
<php>echo '__INCLUDE','__';</php> =>  ./Home/Public/Include/控制器名
</pre>
        <p>如我们将站点存放在“/ThinkPHP/web_association/”中，并在Mnt控制器建立test模板<code>./Nutjs/Home/View/Mnt/test.tpl</code></p>
<pre>
<php>echo '__PUB','__';</php>

<php>echo '__STYLE','__';</php>

<php>echo '__IMAGE','__';</php>

<php>echo '__SCRIPT','__';</php>

<php>echo '__INCLUDE','__';</php>

</pre>
        <p>经过渲染后的结果为</p>
<pre>
/ThinkPHP/web_association/Nutjs/HomePublic/
/ThinkPHP/web_association/Nutjs/Home/Public/Style/Mnt
/ThinkPHP/web_association/Nutjs/Home/Public/Image/Mnt
/ThinkPHP/web_association/Nutjs/Home/Public/Script/Mnt
./Nutjs/Home/Public/Include/Mnt
</pre>
        <p>通过这几个魔法常量，我们可以快捷的引用本控制器的资源文件，通常来说不建议使用<php>echo '__PUB','__';</php>常量来跨控制器访问资源文件，请使用公共资源文件夹。</p>
<pre>
&lt;include file=&quot;<php>echo '__INCLUDE','__';</php>/head.tpl&quot; /&gt;
    &lt;title&gt;开发中心&lt;/title&gt;
    &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;<php>echo '__STYLE','__';</php>/h1.css&quot; /&gt;
    &lt;script charset=&quot;utf-8&quot; src=&quot;<php>echo '__PUBLIC','__';</php>/Library/Script/nut.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;欢迎你，开发者&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
    </section>
    <section>
        <h3>路径类型</h3>
        <p>可能有细心的开发者已经发现我们有2种路径表示。比如我们要表示项目文件中的<code>Nutjs/Home/Public</code>文件夹，我们可以表示为：</p>
<pre>
//URL表示
http://站点URL/Nutjs/Home/Public/

//相对路径表示
./Nutjs/Home/Public/
</pre>
        <p>一般来说View层开发者无需了解此路径区别与注意事项，仅需记住下面的魔法常量应用场景即可：</p>
<pre>
<php>echo '__PUB','__';</php>       引用js,css,图片文件
<php>echo '__STYLE','__';</php>     引用js,css,图片文件
<php>echo '__IMAGE','__';</php>     引用js,css,图片文件
<php>echo '__SCRIPT','__';</php>    引用js,css,图片文件
<php>echo '__INCLUDE','__';</php>   使用Include标签、模板布局、模板继承
</pre>
        <p>如想进一步了解可以<a href="http://pea.nutjs.com/e355">点击这里</a></p>
    </section>
</section>

<section>
    <h2>Widget组件</h2>
    <p>协会网站引入了Widget组件的概念。Widget本质上是一个独立的控制器层，在其中可以建立很多很多的控制器。与Controller唯一不同的是，Widget完全属于View，View层的开发者可以自由的创建使用Widget层控制器。当前，如果要使用Widget组件，你需要有控制器方面的知识。</p>
    <p>在模板中可以使用W方法对Widget进行调用，详细参见<a href="http://document.thinkphp.cn/manual_3_2.html#widget_extend">ThinkPHP官方手册</a></p>
    <p>我们已经预先建立了一个MntWidget，在模板中<code>{:W('Mnt/debug')}</code>就会输出如下字样：</p>
<pre>
Home / MntWidget -> debug()
</pre>
</section>

<section>
    <h2>与原生ThinkPHP不兼容</h2>
    <p>由于某些原因，我们修改了ThinkPHP的核心源码，可能会带来与原生ThinkPHP不兼容的情况发生，请开发者在调试过程中测试指正，我们会第一时间修复不兼容现象。</p>
<pre>
联系人：花生PeA
邮箱：626954412@qq.com
</pre>
</section>
</block>