<extend name="__INCLUDE__/document.extend.tpl" />

<block name="title">开发规范/建议</block>

<block name="h1">Nutjs团队开发规范/建议</block>

<block name="h1_text"><p>我们（Nutjs团队）对于Web开发协会会员开发提出如下建议，希望会员开发时尽量遵守此建议，树立良好统一的开发规范，这样将会十分利于团队合作开发。</p></block>

<block name="body">
<h2>编程原则</h2>
<h3>可读的代码远比风骚的代码要好</h3>
    <p>一个良好可读的代码，不仅便于多人合作，更易于代码复用和维护，因此，相比写出一段风骚优化的代码，良好可读的代码更重要一些。</p>
    <p>独木难成林，一个庞大的项目不是一个人凭借一己之力就能撑起来的，项目的推动需要很多人不懈的努力，因此，提高合作亲密度增强代码可读性才是最重要的。</p>

<h2>大括号与分号的写法</h2>
<p>我们建议左大括号与上一语句不换行来增强可读性</p>
<pre>
//JavaScript
function Nutjs(id){
    this.id=id;
};
if(typeof Nutjs == 'function'){
    var nutjs=new Nutjs();
};
</pre>
<p>这样有助于代码可读性和降低掉分号错觉，还可以让代码行数变短便于阅读</p>
<p>对于所有语言包括JavaScript，我们建议在所有能加分号的地方加分号来增强可读性。</p>
<pre>
//JavaScript
function draw(tpl){
    var str = tpl
        .replace("#fx#"     ,this.fx)
        .replace("#workid#" ,this.workid)
        .replace("#date#"   ,this.date)
        .replace("#server#" ,this.server)
    ;
    return str;
};
</pre>

<h2>类(PHP)/构造函数(JavaScript)规范</h2>
    <p>类名/构造方法名首字母要大写:</p>
<pre>
//JavaScript
function Nutjs(id){
    this.id=id;
};

//PHP
class Nutjs{
    protected $id;
}
</pre>
    <p>每一个类/构造函数应单独存放在一个文件中，并且文件名应以类名/构造方法名来命名。</p>
    <p>在PHP中，文件的扩展名应为.class.php。如：UsersModel.class.php</p>

<h2>表单/数据库命名规范</h2>
    <p>所有的前后台数据交换均统一采用小写字母+下划线来命名字段名。</p>
    <p>数据表和表字段名也要采用小写字母+下划线的方式。</p>
    <pre>
//HTML
&lt;label&gt;姓名：&lt;input name="user_name" /&gt;&lt;/label&gt;
&lt;label&gt;年龄：&lt;input name="user_age" /&gt;&lt;/label&gt;

//SQL
SELECT * FROM `invite_code`
DELETE FROM `wa_token` WHERE `wa_token`.`user_id` = 'A000'
</pre>

<h2>对象/类</h2>
    <p>对象或类的属性方法命名要采用骆驼峰命名法，首字母要小写</p>
<pre>
//JavaScript
//如js的原生方法：document.getElementsByTagName();
var obj={};
obj.inviteCodeLength=5;
obj.getInviteCodeLenght=function(){
    return this.inviteCodeLength;
};

//PHP
class Peanut{
    protected $fruitSize;
    public function changeFruitSize($size){
        $this->fruitSize=$size;
    }
}
$peanut=new Peanut();
$peanut->changeFruitSize('2cm');
</pre>
    <p>不允许使用小写字母+下划线的命名方式，如下面的代码就是错误的</p>
<pre>
//JavaScript
//这样是不是很怪异？document.get_element_by_tag_name();
var obj={};
obj.invite_codeLength=5;
obj.get_invite_codeLenght=function(){
    return this.invite_codeLength;
};

//PHP
class Peanut{
    protected $fruit_size;
    public function change_fruit_size($size){
        $this->fruit_size=$size;
    }
}
$peanut=new Peanut();
$peanut->change_fruit_size('2cm');
</pre>

<h2>以下划线“_”开头/结尾的语义</h2>
<h3>以下划线“_”打头的函数/方法/属性</h3>
    <p>通常以下划线开头的情形多出现在对象的属性或方法中。以下划线“_”开头的函数/方法表示私有方法，一般为对象内部的系统核心方法，不建议外部调用。同样，以下划线“_”开头的属性为系统核心属性。</p>
<h3>以双下划线“__”打头的函数/方法</h3>
    <p>通常表示函数/方法是一个魔法方法，如 __call 和 __autoload</p>
<h3>以双下划线“__”打头并以双下划线“__”结尾的常量</h3>
    <p>通常表示该常量是一个魔法常量，如 __FILE__ 和 __DIR__</p>
<h2>常量的命名规范</h2>
    <p>一般来说常量要求全部字母大写并以下划线“_”分割，如HAS_ONE 和 MANY_TO_MANY 。但是对于本土语言非英语的人群来说是十分难以分辨的，因此我们建议采用下划线+骆驼峰的方式来命名</p>
<pre>
//PHP
//一般的常量命名
define('MEMORY_CACHE_TIME'  ,3600);
//采用下划线+骆驼峰
define('Memory_Cache_Time'  ,3600 ,true);
//甚至可以根据可读做出更为自由的调整
define('RegExp_uid'         ,'/^\w\d{3}$/' ,true);
</pre>
    <p>可以看到第二种的命名方式可读性要高于第一种。我们在第二中常量定义时加入第三个参数“true”，表示该常量读取对大小写不敏感，这样可以兼容传统读取</p>
    <p>这种命名方式虽然对性能有所损耗，但是带来的十分友好的可读性，因此是值得推广的。</p>

<h2>文件扩展名</h2>
<p>在Linux操作系统中是严格区分大小写的，因此我们建议统一采用小写文件扩展名，如:</p>
<pre>
nutjs.png
nutjs.jpg
</pre>
<h2>JavaScript中函数的形参</h2>
<p>在函数定义过程中，我们建议使用以美元符号“$”开头来定义形参以增强可读性。</p>
<pre>
//JavaScript
function hello ($user){
    var msg=null;
    msg="hello "+$user;
    alert(msg);
};
</pre>

<h2>变量的命名建议</h2>
<p>我们对于变量的命名不作出明确规范，有开发者自由命名，但是建议遵守以下几个原则:</p>
<ol>
    <li>变量名要符合其自身语义</li>
    <li>变量命名时应避免首字母大写</li>
    <li>建议采用骆驼峰或下划线+小写字母这2种方式进行命名</li>
</ol>

<h2>浏览器兼容</h2>
<p>开发过程中我们建议会员统一使用Firefox最新版或ESR版作为主开发调试工具，利用Firefox的强大调试插件Firebug可以大大的减轻调试难度</p>
<p>而对于浏览器兼容方面，我们建议开发者兼容如下列表</p>
<ul>
	<li>Firefox最新版和ESR版</li>
	<li>Chrome最新版</li>
	<li>主流国产浏览器急速内核</li>
    <li>IE11</li>
</ul>
<p>建议开发者在HTML的head标签中加入如下meta标签</p>
<pre>
&lt;!-- 让IE浏览器以edge引擎渲染 --&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
&lt;!-- 让双核浏览器用webkit引擎渲染 --&gt;
&lt;meta name="renderer" content="webkit" /&gt;
</pre>
</block>