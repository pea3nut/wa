<extend name="__INCLUDE__/document.extend.tpl" />

<block name="title">部署安装</block>

<block name="h1">部署安装Web开发协会网站</block>

<block name="h1_text">
    <p>本章节主要介绍如何获取&amp;部署Web开发协会站点在你的电脑上。</p>
    <p>以下过程采用Windows系统作为例子，Linux请根据情况作出相应调整。</p>
</block>

<block name="body">
<section>
    <h2>配置运行环境</h2>
    <h3>配置wamp环境</h3>
    <p>根据协会的网站运行环境搭建一个尽可能接近的wamp运行环境，协会网站运行环境请参考<a href="{:U('Exploit/structure')}">网站构架信息</a>章节。配置过程这里就不再赘述。</p>
    <h3>开启特定的模块</h3>
    <h4>Apache部分</h4>
    <p>用Notepad++或其他编辑器打开Apache配置文件，注意不要用Windows自带的笔记本或写字板</p>
    <p>配置文件所在路径</p>
    <pre>Wamp安装目录\bin\apache\Apache+版本号\conf\httpd.conf</pre>
    <p>打开配置文件后，搜索定位URL重写模块，去掉前面的#注释符，让Apache加载URL重写模块</p>
    <pre>#LoadModule rewrite_module modules/mod_rewrite.so</pre>
    <p>在配置文件末尾添加如下配置信息</p>
    <pre>
&lt;IfModule dir_module&gt;
    DirectoryIndex index.php index.php3 index.html index.htm default.html
&lt;/IfModule&gt;</pre>
    <p>保存配置文件，重启Apache服务器生效。</p>
    <h4>PHP部分</h4>
    <p>用Notepad++或其他编辑器打开PHP配置文件，注意不要用Windows自带的笔记本或写字板</p>
    <p>配置文件所在路径</p>
    <pre>Wamp安装目录\bin\php\php+版本号\php.ini</pre>
    <p>打开配置文件后，搜索定位GD库，去掉前面的;注释符，让PHP加载GD库</p>
    <pre>;extension=php_gd2.dll</pre>
    <p>保存配置文件，重启Apache服务器生效。</p>
</section>

<section>
    <h2>获取网站源码</h2>
    <p>开发者可以访问github来获取最新的协会站点源码。</p>
    <pre>https://github.com/pea3nut/wa</pre>
</section>

<section>
    <h2>检测配置是否生效</h2>
    <p>将站点复制到wamp的www目录，在浏览器访问站点根目录，如果重定向到站点URL/Exploit/index并打开开发中心页面，说明前面的配置生效。</p>
    <p>此时，开发者可以在本地查看开发文档页，不应该继续留在协会网站的开发文档页中。</p>
</section>

<section>
    <h2>配置站点与本地结合</h2>
    <h3>配置数据库信息</h3>
    <p>打开项目文件./Nutjs/Home/Conf/config.php，修改数据库信息为自己的数据库信息。</p>
    <p>数据库配置规则<a target="_blank" href="http://document.thinkphp.cn/manual_3_2.html#connect_db">参见这里</a></p>
    <h3>导入数据库</h3>
    <p>./Nutjs/Home/Conf/文件夹下有2个sql文件，为项目运行数据库，其中一个是有数据（推荐），另一个无数据，开发者可根据自身情况选择。有数据版的用户密码均为“123456”</p>
    <p>打开phpMyAdmin，建立一个数据库，确保和config.php中的数据库名一致。</p>
    <p>选择“操作”->“导入”，导入./Nutjs/Home/Conf/下的sql文件之一。</p>
    <p>配置完成后运行“站点URL/Mnt/test_db”测试数据库连接是否成功。若连接成功会提示“连接成功！”，若失败则会报错，开发者可根据错误信息进行排查。</p>
</section>

<section>
    <h2>开发与调试</h2>
    <p>开发过程中建议开发者的开发工作仅限于自身层次，触发你明确知道自己在做什么，否则不要跨层修改代码。</p>
    <p>Nutjs团队提供了一系列<a href="{:U('tools')}">开发工具</a>可供开发者开发调试。</p>
</section>

<section>
    <h2>Github协作流程</h2>
    <section>
        <h3>Nutjs团队成员</h3>
        <p>作为核心开发成员，首先要做的是登记自己的公钥。私聊花生发送自己的公钥文件，花生会讲你的公钥添加进仓库的“Deploy keys”列表。</p>
        <p>添加完公钥后，你可以直接使用clone命令来克隆协会网站</p>
    <pre>git clone git@github.com:pea3nut/wa.git</pre>
        <p>克隆完成后我们在本地要新建一个个人分支，名称随意（这里以pea名称为例），但是注意不要与其他分支重名</p>
    <pre>git branch pea</pre>
        <p>Git鼓励多次提交，开发过程中每当你的项目有所改动时，尽可能的多多将改动提交到你的个人分支上。</p>
        <p>根据项目情况，如果完成了一个小功能或其他的什么东西，你可以将个人分支上的改动合并进dev分支</p>
<pre>
git checkout dev
git merge --no-ff pea
</pre>
        <p>如果这个功能十分完整保证其正常运行，其不与其他模块发生冲突，也就是能达到直接上线的水平，那么你可以把它合并进master分支上</p>
<pre>
git checkout master
git merge --no-ff pea
</pre>
        <p>注意，每天工作结束时要记得将自己的dev分支和master分支push到gihub上，如果分支没有任何改动可以不push</p>
<pre>
git push origin master  //如果master分支有改动的话
git push origin dev     //如果dev分支有改动的话
</pre>
        <p>每天工作前也记得更新自己本地的dev分支和master分支保持同步</p>
<pre>
git pull origin master
git pull origin dev
</pre>
        <p>项目的完成需要每一个人的努力，为了方便他人，请在提交commit的时候详细写明本次提交的说明。</p>
    </section>
    <section>
        <h3>非Nutjs团队成员</h3>
        <p>To be continue</p>
        <pre>To be continue</pre>
        <ul>
            <li>To be continue</li>
            <li>To be continue</li>
        </ul>
    </section>
</section>
</block>