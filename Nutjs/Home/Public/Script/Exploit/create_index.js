function CreateIndex($elements){
    //要遍历的标签集合，可以直接更改，原生DOM节点集合
    this.element =$elements||document.getElementsByTagName("*");
    //参与索引的标签名，如需设置此值请通过setIndexTagName方法
    this.indexTag =['H1','H2','H3'];
    //默认生成的索引HTML
    this.navHtml="";
    //系统运行变量，请勿更改
    this.indexIndex=[0,0,0];//标签索引数
    /**符合条件的元素集合
     * 使用createIndex方法后，程序会将所有符合条件的元素以一个特殊的对象形式存储起来
     * 格式{"index":"1.0.0","element":elementObj}
     * 其中index表示元素的整体索引
     * */
    this.indexElt=[];
};
//要索引元素的前导字符
CreateIndex.prototype.indexPrefix=[
    ['一、','二、','三、','四、','五、','六、','七、','八、','九、','十、','十一、','十二、','十三、','十四、','十五、','十六、']
    ,['1.','2.','3.','4.','5.','6.','7.','8.','9.']
    ,['① ','② ','③ ','④ ','⑤ ','⑥ ','⑦ ','⑧ ','⑨ ']
];
/**设置要进行索引的标签名
 * 可接受一个数组或以逗号分隔的字符串。如"h1,h2,h3" | "h1","h2","h3"
 * */
CreateIndex.prototype.setIndexTagName=function ($tag_name){
    //判断是否是字符串，分割成数组
    if(typeof $tag_name === 'string') $tag_name=$tag_name.split(',');
    //将标签名转换成大写
    for(var i=0 ;i<$tag_name.length ;i++){
        $tag_name[i] =$tag_name[i].toUpperCase();
    };
    //赋值标签名
    this.indexTag=$tag_name;
    //返回this
    return this;
};
/**遍历标签列表
 * 添加前导数字，填充this.indexElt
 * 若$no_prefix为true，则不会加前导数字。
 * */
CreateIndex.prototype.createIndex =function ($no_prefix){
    //初始化系统变量
    //标签集合
    this.indexElt=[];
    //标签索引数
    this.indexIndex=[];
    for(var i=0 ;i<this.indexTag.length ;i++){
        this.indexIndex.push(0);
    };
    //遍历所有标签
    for(var i=0 ;i<this.element.length ;i++){
        //遍历所有参与索引的标签名
        for(var v=0 ;v<this.indexTag.length ;v++){
            if (this.element[i].tagName == this.indexTag[v]) {
                //索引前导的类型
                var indexType=this.indexPrefix[v];
                //加前导
                if(!$no_prefix){
                    this.element[i].innerHTML =(indexType[this.indexIndex[v]] + this.element[i].innerHTML);
                }
                //记录节点
                this.indexElt.push({
                    "element"   :this.element[i],
                    "index"     :this.indexIndex.join("."),
                });
                //索引++
                this.indexIndex[v]++;
                //初始化所有子级索引
                for(var j=v+1 ;j<this.indexIndex.length ;j++){
                    this.indexIndex[j]=0;
                };
            };
        };
    };
    //返回this
    return this;
};
/**生成目录HTML，若$no_anchor为true则不会生成超链接
 * 默认会生成带缩进的li标签，并带有锚点链接，且对于每一个索引的元素添加id值
 * 生成的HTML会填充在this.navHtml中。因为是li标签，所以可能开发者还需要将它们放进一个ul或ol中
 * 开发者也可以根据自己的需求重载此函数
 * */
CreateIndex.prototype.createNav=function ($no_anchor){
    //遍历所有记录的节点/
    for(var i=0 ;i<this.indexElt.length ;i++){
        //当前元素
        var elt=this.indexElt[i].element;
        //当前元素的索引
        var eltIndex=this.indexElt[i].index;
        //缩进的数量
        var textIndent=0;
        //获取缩进量
        for(var v=0 ;v<this.indexTag.length ;v++){
            if (elt.tagName == this.indexTag[v]) {
                textIndent = 2*v;
                break;
            };
        };
        //生成html
        if ($no_anchor) {
            this.navHtml +='<li style="list-style-type:none;margin-left:'+textIndent+'em;">'+elt.innerHTML+"</li>\n";
        }else{
            //获取要添加ID的节点
            var set_id_elt=null;
            //如果元素的父节点是section，则把id添加在父节点上
            if (elt.parentNode.tagName.toLocaleLowerCase() == 'section') {
                set_id_elt=elt.parentNode;
            }else{
                set_id_elt=elt;
            };
            //生成id
            var elt_id="anchor-"+eltIndex;
            //添加节点ID
            set_id_elt .id =elt_id;
            //设置锚点链接为标题的父元素section
            this.navHtml +='<li style="list-style-type:none;margin-left:'+textIndent+'em;"><a href="#'+elt_id+'" target="_self">'+elt.innerHTML+"</a></li>\n";
        };
    }
    //返回this
    return this;
};